import { useEffect, useMemo, useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import QRCode from "qrcode";
import jsPDF from "jspdf";

interface Cert {
  id: string;
  code: string;
  issued_at: string;
  course_id: string;
  instructor_name: string | null;
}

export const MyCertificatesPage = () => {
  const { toast } = useToast();
  const [certs, setCerts] = useState<Cert[]>([]);
  const [courseTitles, setCourseTitles] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => { document.title = 'My Certificates | Learning'; }, []);

  useEffect(() => {
    const load = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('certificates')
        .select('id, code, issued_at, course_id, instructor_name')
        .order('issued_at', { ascending: false });
      if (error) {
        toast({ title: 'Error', description: error.message, variant: 'destructive' });
      } else {
        setCerts(data || []);
        // Fetch course titles in batch
        const ids = Array.from(new Set((data || []).map((c: any) => c.course_id)));
        if (ids.length) {
          const { data: courses } = await supabase
            .from('courses')
            .select('id, title')
            .in('id', ids);
          const map: Record<string, string> = {};
          (courses || []).forEach((c: any) => { map[c.id] = c.title; });
          setCourseTitles(map);
        }
      }
      setLoading(false);
    };
    load();
  }, [toast]);

  const downloadPdf = async (cert: Cert) => {
    try {
      const shareUrl = `${window.location.origin}/certificates/verify/${cert.code}`;
      const qrDataUrl = await QRCode.toDataURL(shareUrl, { margin: 0, width: 256 });

      const doc = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'a4' });
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();

      // Border
      doc.setDrawColor(60, 60, 60);
      doc.setLineWidth(2);
      doc.roundedRect(28, 28, pageWidth - 56, pageHeight - 56, 12, 12);

      // Title
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(32);
      doc.text('Certificate of Completion', pageWidth / 2, 110, { align: 'center' });

      // Subtitle
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(14);
      doc.text('This is to certify that', pageWidth / 2, 160, { align: 'center' });

      // Student name (from profile - fetched on verification page usually). We print placeholder "Student" since PDF is generated by the student.
      // You can enhance by fetching display name from profiles with supabase.auth.getUser().
      const { data: userRes } = await supabase.auth.getUser();
      const studentName = userRes.user?.email || 'Student';
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(26);
      doc.text(studentName, pageWidth / 2, 200, { align: 'center' });

      // Course title
      const title = courseTitles[cert.course_id] || 'Course';
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(14);
      doc.text('has successfully completed the course', pageWidth / 2, 240, { align: 'center' });
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(22);
      doc.text(title, pageWidth / 2, 275, { align: 'center' });

      // Details row
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);
      const date = new Date(cert.issued_at).toLocaleDateString();
      doc.text(`Completion Date: ${date}`, 100, pageHeight - 130);
      doc.text(`Instructor: ${cert.instructor_name || 'Instructor'}`, 100, pageHeight - 105);
      doc.text(`Certificate ID: ${cert.code}`, 100, pageHeight - 80);

      // QR code
      doc.addImage(qrDataUrl, 'PNG', pageWidth - 200, pageHeight - 220, 128, 128);
      doc.setFontSize(10);
      doc.text('Scan to verify', pageWidth - 136, pageHeight - 80, { align: 'center' });

      doc.save(`${title.replace(/[^a-z0-9]+/gi, '_')}_certificate.pdf`);
    } catch (err: any) {
      toast({ title: 'PDF error', description: err.message, variant: 'destructive' });
    }
  };

  const share = async (cert: Cert) => {
    const url = `${window.location.origin}/certificates/verify/${cert.code}`;
    try {
      if (navigator.share) {
        await navigator.share({ title: 'Certificate', text: 'Check my course certificate', url });
      } else {
        await navigator.clipboard.writeText(url);
        toast({ title: 'Link copied', description: 'Certificate link copied to clipboard.' });
      }
    } catch (e) {
      await navigator.clipboard.writeText(url);
      toast({ title: 'Link copied', description: 'Certificate link copied to clipboard.' });
    }
  };

  return (
    <main className="p-6 max-w-5xl mx-auto space-y-6">
      <h1 className="text-3xl font-bold">My Certificates</h1>
      {loading ? (
        <p className="text-sm text-muted-foreground">Loading certificates...</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {certs.map((c) => (
            <Card key={c.id} className="p-4 space-y-2">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold">{courseTitles[c.course_id] || 'Course'}</h3>
                  <p className="text-sm text-muted-foreground">Issued {new Date(c.issued_at).toLocaleDateString()}</p>
                </div>
                <Badge>Verified</Badge>
              </div>
              <div className="flex gap-2">
                <Button size="sm" onClick={() => downloadPdf(c)}>Download PDF</Button>
                <Button size="sm" variant="outline" onClick={() => share(c)}>Share</Button>
              </div>
              <p className="text-xs text-muted-foreground">ID: {c.code}</p>
            </Card>
          ))}
          {certs.length === 0 && (
            <p className="text-sm text-muted-foreground">No certificates yet. Complete a course to earn one!</p>
          )}
        </div>
      )}
    </main>
  );
};

export default MyCertificatesPage;
